#include <GL/glut.h>
#include <math.h>

void drawKoch(float x1, float y1, float x2, float y2, int depth) {
    if (depth == 0) {
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
        return;
    }

    float dx = (x2 - x1) / 3.0;
    float dy = (y2 - y1) / 3.0;

    // Points dividing the line into 3 segments
    float xA = x1 + dx;
    float yA = y1 + dy;

    float xB = x1 + 2 * dx;
    float yB = y1 + 2 * dy;

    // Coordinates of the peak of the equilateral triangle
    float xM = (x1 + x2) / 2.0;
    float yM = (y1 + y2) / 2.0;

    float px = xA + (dx * cos(M_PI / 3)) - (dy * sin(M_PI / 3));
    float py = yA + (dx * sin(M_PI / 3)) + (dy * cos(M_PI / 3));

    // Recursive calls for each new segment
    drawKoch(x1, y1, xA, yA, depth - 1);
    drawKoch(xA, yA, px, py, depth - 1);
    drawKoch(px, py, xB, yB, depth - 1);
    drawKoch(xB, yB, x2, y2, depth - 1);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.2, 0.7, 1.0);
    glBegin(GL_LINES);

    drawKoch(-0.8f, 0.0f, 0.8f, 0.0f, 4);  // Increase depth for more detail

    glEnd();
    glFlush();
}

void init() {
    glClearColor(0, 0, 0, 1); // Background: black
    glColor3f(1, 1, 1);       // Draw color: white
    gluOrtho2D(-1, 1, -1, 1); // 2D projection
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Koch Curve - 4 Control Points");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

g++  -o filename filename.cpp -lGL -lGLU -lglut
./filename

AIM: GENERATE FRACTAL PATTERNS USING I) BEZIER II) KOCH CURVE

OBJECTIVE:
Koch Curve : 
Fractals are geometric objects. Many real-world objects like ferns are shaped like fractals. Fractals are 
formed by iterations. Fractals are self-similar. 
In computer graphics, we use fractal functions to create complex object 
The object representations uses Euclidean-geometry methods; that is, object shapes were described with 
equations. These methods are adequate for describing manufactured objects: those that have smooth 
surfaces and regular shapes. But natural objects, such as mountains and clouds, have irregular or 
fragmented features, and Euclidean methods do not realistically model these objects. Natural objects can 
be realistically described with fractal-geometry methods, where procedures rather than equations are used 
to model objects. 
In computer graphics, fractal methods are used to generate displays of natural objects and visualizations 
The self-similarity properties of an object can take different forms, depending on the choice of fractal 
representation. 
In computer graphics, we use fractal functions to create complex objects 
A mountain outlined against the sky continues to have the same jagged shape as we view it from a 
closer and closer. We can describe the amount of variation in the object detail with a number called the 
fractal dimension. 
ALGORITHM: 
1. 
The Koch snowflake can be constructed by starting with an equilateral triangle, then 
recursivelyaltering each line segment as follows: 
2. Divide the line segment into three segments of equal length. 
I. 
Draw an equilateral triangle that has the middle segment from step 1 as its base 
and pointsoutward. 
II. Remove the line segment that is the base of the triangle from step 2. 
III. After one iteration of this process, the resulting shape is the outline of a hexagram. 
4. 
3. The Koch snowflake is the limit approached as the above steps are followed over and over again. 
The Koch curve originally described by Koch is constructed with only one of the three 
sides of theoriginal triangle. 
5. In other words, three Koch curves make a Koch snowflake. 
Examples: In graphics applications, fractal representations are used to model terrain, clouds, water, trees 
and other plants, feathers, fur, and various surface textures, and just to make pretty patterns. In other 
disciplines, fractal patterns have been found in the distribution of stars, river islands, and moon craters; in 
rain fields; in stock market variations; in music; in traffic flow; in urban property utilization; and in the 
boundaries of convergence regions for numerical- analysis techniques 
Koch Fractals (Snowflakes) 
• Add Some Randomness: 
• The fractals we’ve produced so far seem to be very regular and “artificial”. 
• To create some realism and variability, simply change the angles slightly sometimes based on a 
random number generator. 
• For example, you can curve some of the ferns to one side. 
• For example, you can also vary the lengths of the branches and the branching factor. 
Terrain (Random Mid-point Displacement): 
• Given the heights of two end-points, generate a height at the mid-point. 
• Suppose that the two end-points are a and b. Suppose the height is in the y direction, such that the 
height at a is y(a), and the height at b is y(b). 
• Then, the height at the mid-point will be: 
ymid = (y(a)+y(b))/2 + r, where 
r is the random offset 
• This is how to generate the random offset r: 
r = srg|b-a|, where 
s is a user-selected “roughness” factor, and 
rg is a Gaussian random variable with mean 0 and variance 1

CONCLUSION: Thus we have to studied Different kind of curve and its implementation
